from matplotlib.patches import Polygon
import pyproj
from spherical_geometry.polygon import SphericalPolygon
from mpl_toolkits.basemap import Basemap
import matplotlib.pyplot as plt
import numpy as np
import os
from matplotlib.patches import Polygon
from matplotlib import patches
from matplotlib.collections import LineCollection, PolyCollection
savedir = '/home/laojin/my_lat/basemap/'
if os.path.exists(savedir) == False:
	os.makedirs(savedir)


poly = SphericalPolygon.from_cone(0,0,15,steps=50)
x,y = [p for p in poly.to_radec()][0]

poly1 = SphericalPolygon.from_cone(0,90,15,steps=50)
x1,y1 = [p for p in poly1.to_radec()][0]

xx = np.concatenate((x,x1))
yy = np.concatenate((y,y1))
#print(x,y)

xx1 = [245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.05199896846096, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 245.04199896846097, 247.5979786628817, 248.99847895667045, 250.34636983917915, 251.6474764079201, 252.90732726396186, 254.13122935659976, 255.32435039878695, 256.4918123539396, 257.6388013598188, 258.77070214087, 259.8932690425068, 261.0128522774758, 262.1367085367857, 263.27344296898127, 264.4336607600497, 265.63096330666804, 266.88353173499536, 268.2167556796261, 269.6678210708618, 271.29420712234935, 273.1906106832009, 275.52589528743204, 278.6340253087111, 283.2774625017068, 291.60760838277537, 311.87704235057356, 9.911587838452505, 56.00772515029007, 71.29444363464722, 78.22468497150791, 82.3246943332868, 85.17160983774363, 87.3631166830078, 89.1729457855769, 90.7439329002498, 92.15809384593382, 93.46615069380223, 94.7014323928957, 95.88700544471794, 97.03959156808642, 98.17184527532359, 99.29374300053763, 100.41346667040028, 101.53798752560533, 102.67346600990405, 103.82553554430427, 104.99951130530667, 106.2005497146902, 107.43377514714766, 108.7043846869067, 110.01773814035485, 111.37943809621063, 112.79540311576594, 114.27193581705075, 115.8157864740096, 117.434211624201, 119.13502593121655, 120.92664405615338, 122.81810743507566, 124.81908852302985, 126.93986216156668, 129.19123023124547, 131.5843817718942, 134.1306666454086, 136.84125733950643, 139.7266720348858, 142.7961347475889, 146.0567582203854, 149.51255578576524, 153.16332262277655, 157.0034750206056, 161.0209931810586, 165.1966650776178, 169.50385369022376, 173.90898221199586, 178.37283551582556, 182.85261953809442, 187.3045432725953, 191.68655189208857, 195.9607982280623, 200.09551079271506, 204.06607015768168, 207.85528248798153, 211.45298180032927, 214.85516959664858, 218.06291159745268, 221.08117649567424, 223.9177464236438, 226.58227332935797, 229.0855108702316, 231.43872116313906, 233.65323845289782, 235.74016420274268, 237.71016682648968, 239.5733614845788, 241.3392491220277, 243.0166980539551, 244.61395527305194]
yy1 = [-0.9090898989898903, -2.7272696969696995, -4.545449494949494, -6.363629292929289, -8.181809090909084, -9.999988888888879, -11.818168686868688, -13.636348484848483, -15.454528282828278, -17.272708080808073, -19.090887878787868, -20.909067676767677, -22.72724747474747, -24.545427272727267, -26.36360707070707, -28.181786868686864, -29.999966666666666, -31.81814646464646, -33.636326262626255, -35.45450606060606, -37.27268585858585, -39.090865656565654, -40.90904545454545, -42.72722525252525, -44.545405050505046, -46.36358484848485, -48.18176464646464, -49.99994444444444, -51.81812424242424, -53.636304040404035, -55.45448383838384, -57.27266363636363, -59.09084343434343, -60.90902323232323, -62.72720303030303, -64.54538282828283, -66.36356262626262, -68.18174242424243, -69.99992222222221, -71.81810202020202, -73.63628181818181, -75.45446161616161, -77.27264141414142, -79.09082121212121, -80.90900101010101, -82.7271808080808, -84.5453606060606, -86.3635404040404, -88.1817202020202, -89.9999, -89.9999, -88.1817202020202, -86.3635404040404, -84.5453606060606, -82.7271808080808, -80.90900101010101, -79.09082121212121, -77.27264141414142, -75.45446161616161, -73.63628181818181, -71.81810202020202, -69.99992222222221, -68.18174242424243, -66.36356262626262, -64.54538282828283, -62.72720303030303, -60.90902323232323, -59.09084343434343, -57.27266363636363, -55.45448383838384, -53.636304040404035, -51.81812424242424, -49.99994444444444, -48.18176464646464, -46.36358484848485, -44.545405050505046, -42.72722525252525, -40.90904545454545, -39.090865656565654, -37.27268585858585, -35.45450606060606, -33.636326262626255, -31.81814646464646, -29.999966666666666, -28.181786868686864, -26.36360707070707, -24.545427272727267, -22.72724747474747, -20.909067676767677, -19.090887878787868, -17.272708080808073, -15.454528282828278, -13.636348484848483, -11.818168686868688, -9.999988888888879, -8.181809090909084, -6.363629292929289, -4.545449494949494, -2.7272696969696995, -0.9090898989898903, -6.2376468590768805, -9.287139999342392, -12.364850610511017, -15.468083816559437, -18.59441573719345, -21.741659221795448, -24.907833546888984, -28.091137470637438, -31.289925048840633, -34.50268360862509, -37.72801323265884, -40.96460700430456, -44.21123106200328, -47.466703135466645, -50.7298675457411, -53.99956336341037, -57.2745799405136, -60.55358904304068, -63.83503218251829, -67.11691745184557, -70.39641959871747, -73.66900860672736, -76.92629244815869, -80.14966956669483, -83.28629441753313, -86.11517582430463, -87.33477310087895, -85.4050046114177, -82.44261917684447, -79.2725118721283, -76.03686136007043, -72.77416526832289, -69.49907441131568, -66.21856513533294, -62.93656558664406, -59.65561413036791, -56.37755551757532, -53.10387004630465, -49.8358450044942, -46.57467194091949, -43.32150660150296, -40.07750914687485, -36.843873681486826, -33.621852026313555, -30.412774603370256, -27.218070217216376, -24.0392859344178, -20.87810794405399, -17.736384113048175, -14.616148866972562, -11.51965099514779, -8.449384977222357, -5.408126442363988, -2.3989723892948067, 0.5746131976091559, 3.508747720737988, 6.399071784147644, 9.240684055768787, 12.028069058665253, 14.755018236990534, 17.41454537386618, 19.998798539359566, 22.49897233601217, 24.90522640898928, 27.20661909031695, 29.39106865288673, 31.445358768146658, 33.355208863601106, 35.10543313416368, 36.68021233168312, 38.06349795407699, 39.23955681062134, 40.19364380913663, 40.91276325128975, 41.38644875214066, 41.60746781716384, 41.57234945221029, 41.281649361976974, 40.739906965611425, 39.955301772594495, 38.939067682086616, 37.7047576064154, 36.2674601104432, 34.64305664618256, 32.84758118643366, 30.896713886637997, 28.805414575517304, 26.587684092790592, 24.256431999344592, 21.823426251914228, 19.299301739108945, 16.69360805592405, 14.014881078684954, 11.270726915769238, 8.467910231627155, 5.612441646177945, 2.709660932911587, -0.2356858177876197]


fig = plt.figure()
ax = fig.add_subplot(1,1,1)
e1 = patches.Ellipse((0, 0), 15,15,angle=0, linewidth=2, fill=False, zorder=2)


map = Basemap(projection='moll',lat_0=0,lon_0=245.06199896846095-180,resolution = 'l',area_thresh=1000.0,celestial=True,ax = ax)
#xxx = map.tissot(0,50,60,30,facecolor='coral',edgecolor='coral',linewidth=0)
#map.drawgreatcircle(0,0,50,50)
xx,yy = map(xx,yy)
new_xy = list(zip(xx,yy))
xxx,yyy = map(xx1,yy1)
map.plot(xxx,yyy)


xxx,yyy = map(xx1[0],yy1[0])
print(xx1[0],yy1[0])
map.plot(xxx,yyy,'o')
xxx,yyy = map(xx1[20],yy1[20])
print(xx1[20],yy1[20])
map.plot(xxx,yyy,'o')
xxx,yyy = map(xx1[80],yy1[80])
print(xx1[80],yy1[80])
map.plot(xxx,yyy,'o')

xxx,yyy = map(xx1[100],yy1[100])
print(xx1[100],yy1[100])
map.plot(xxx,yyy,'o')
coords = [new_xy]
lines = LineCollection(coords,antialiaseds=(1,))
ax.add_collection(lines)
#print(xxx)
poly1 = Polygon(new_xy,facecolor='coral',edgecolor='coral',linewidth=0)
polys = [poly1]

ax.add_patch(poly1)
ax.add_patch(e1)
#ax.add_patch(xxx)
#map.drawcoastlines(linewidth=0.25)
#map.drawcountries(linewidth=0.25)
#map.fillcontinents(color='coral',lake_color='aqua')
# draw the edge of the map projection region (the projection limb)
#map.drawmapboundary(fill_color='aqua')
# draw lat/lon grid lines every 30 degrees.

map.drawmeridians(np.arange(-180,180,30),dashes=[1,0],color='#d9d6c3')
map.drawparallels(np.arange(-90,90,30),dashes=[1,0], labels=[1,0,0,1], color='#d9d6c3')
# make up some data on a regular lat/lon grid.
#nlats = 73; nlons = 145; delta = 2.*np.pi/(nlons-1)
#print(np.indices((nlats,nlons))[0,:,:])
#lats = (0.5*np.pi-delta*np.indices((nlats,nlons))[0,:,:])
#lons = (delta*np.indices((nlats,nlons))[1,:,:])
#wave = 0.75*(np.sin(2.*lats)**8*np.cos(4.*lons))
#mean = 0.5*np.cos(2.*lats)*((np.sin(2.*lats))**2 + 2.)
#compute native map projection coordinates of lat/lon grid.
#x, y = map(lons*180./np.pi, lats*180./np.pi)
# contour data over the map.
#cs = map.contour(x,y,wave+mean,15,linewidths=1.5)
plt.title('contour lines over filled continent background')
plt.savefig(savedir + 'A_basemap.png')
plt.close()

i, j = np.indices((2,3))
print('----------------------')
print(i)
print(j)
